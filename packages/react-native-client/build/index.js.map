{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,kBAAkB,EAClB,YAAY,GAEb,MAAM,mBAAmB,CAAC;AAQ3B,OAAO,uBAAuB,MAAM,2BAA2B,CAAC;AAChE,OAAO,qBAAqB,MAAM,yBAAyB,CAAC;AAE5D,iCAAiC;AACjC,MAAM,CAAC,MAAM,EAAE,GAAG,uBAAuB,CAAC,EAAE,CAAC;AAE7C,MAAM,UAAU,KAAK;IACnB,OAAO,uBAAuB,CAAC,KAAK,EAAE,CAAC;AACzC,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,aAAa,CAAC,KAAa;IAC/C,OAAO,MAAM,uBAAuB,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;AAC5D,CAAC;AAED,MAAM,OAAO,GAAG,IAAI,YAAY,CAC9B,uBAAuB,IAAI,kBAAkB,CAAC,iBAAiB,CAChE,CAAC;AAEF,MAAM,UAAU,iBAAiB,CAC/B,QAA6C;IAE7C,OAAO,OAAO,CAAC,WAAW,CAAqB,UAAU,EAAE,QAAQ,CAAC,CAAC;AACvE,CAAC;AAED,OAAO,EACL,qBAAqB,GAGtB,CAAC","sourcesContent":["import {\n  NativeModulesProxy,\n  EventEmitter,\n  Subscription,\n} from \"expo-modules-core\";\n\n// Import the native module. On web, it will be resolved to ReactNativeClient.web.ts\n// and on native platforms to ReactNativeClient.ts\nimport {\n  ChangeEventPayload,\n  ReactNativeClientViewProps,\n} from \"./ReactNativeClient.types\";\nimport ReactNativeClientModule from \"./ReactNativeClientModule\";\nimport ReactNativeClientView from \"./ReactNativeClientView\";\n\n// Get the native constant value.\nexport const PI = ReactNativeClientModule.PI;\n\nexport function hello(): string {\n  return ReactNativeClientModule.hello();\n}\n\nexport async function setValueAsync(value: string) {\n  return await ReactNativeClientModule.setValueAsync(value);\n}\n\nconst emitter = new EventEmitter(\n  ReactNativeClientModule ?? NativeModulesProxy.ReactNativeClient\n);\n\nexport function addChangeListener(\n  listener: (event: ChangeEventPayload) => void\n): Subscription {\n  return emitter.addListener<ChangeEventPayload>(\"onChange\", listener);\n}\n\nexport {\n  ReactNativeClientView,\n  ReactNativeClientViewProps,\n  ChangeEventPayload,\n};\n"]}